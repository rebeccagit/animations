<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Animation 2 practice - three.js webgl - io blender - vertex colors</title>
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		
		<script type="text/javascript" src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
		<link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css" />
		
        <link rel="stylesheet" type="text/css" href="stylesheets/main.css">
		
		<style>
			body { margin: 0; padding: 0; background-color: #000000;}
			canvas { width: 100%; height: 100%; }
		</style>
		
	</head>
	<body>
		
		<% include ../partials/nav.ejs %>
		
		<div id="container"></div>
	

		<script src="myscripts/threejs/three.js"></script>
		<script src="myscripts/threejs/Detector.js"></script>

		<script>
			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
			
			
			var container;
			var camera, scene, renderer;
			var mesh, mesh2, mesh3, mesh4, light;
			var mouseX = 0, mouseY = 0;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
		
			
			function init() {
				container = document.getElementById( 'container' );
				
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 5000 );
				camera.position.z = 1800;
				
				scene = new THREE.Scene();
				
				light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 0, 0, 1 ).normalize();
				scene.add( light );
				
				var loader = new THREE.JSONLoader();
				loader.load( "myscripts/obj/cubecolors.js", createScene1 );
				loader.load( "myscripts/obj/cube_fvc.js", createScene2 );
				loader.load( "myscripts/obj/cube_fvc.js", createScene3 );
				loader.load( "myscripts/obj/cubecolors.js", createScene4 );
				
				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				
				container.appendChild( renderer.domElement );
				
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );		
				window.addEventListener( 'resize', onWindowResize, false );
			};
						
			
			function createScene1( geometry, materials ) {
				materials[ 0 ].shading = THREE.FlatShading;
				mesh = new THREE.Mesh( geometry, new THREE.MultiMaterial( materials ) );
				mesh.position.x = 200;
				mesh.position.y = 100;
				mesh.scale.x = mesh.scale.y = mesh.scale.z = 200;
				scene.add( mesh );
			};
			
			function createScene2( geometry, materials ) {
				materials[ 0 ].shading = THREE.FlatShading;
				mesh2 = new THREE.Mesh( geometry, new THREE.MultiMaterial( materials ) );
				mesh2.position.x = -600;
				mesh2.position.y = -100;
				mesh2.scale.x = mesh2.scale.y = mesh2.scale.z = 150;
				scene.add( mesh2 );
			};
			
			function createScene3( geometry, materials ) {
				materials[ 0 ].shading = THREE.FlatShading;
				mesh3 = new THREE.Mesh( geometry, new THREE.MultiMaterial( materials ) );
				mesh3.position.x = 1000;
				mesh3.position.y = -400;
				mesh3.scale.x = mesh3.scale.y = mesh3.scale.z = 250;
				scene.add( mesh3 );
			};
			
			function createScene4( geometry, materials ) {
				materials[ 0 ].shading = THREE.FlatShading;
				mesh4 = new THREE.Mesh( geometry, new THREE.MultiMaterial( materials ) );
				mesh4.position.x = -1100;
				mesh4.position.y = 400;
				mesh4.scale.x = mesh4.scale.y = mesh4.scale.z = 100;
				scene.add( mesh4 );
			};
			
			
			function onDocumentMouseMove( event ) {
				mouseX = ( event.clientX - windowHalfX );
				mouseY = ( event.clientY - windowHalfY );
			};
			
			function onWindowResize() {
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			};			

			
			function animate() {
				requestAnimationFrame( animate );
				render();
			};
			
			
			function render() {
				camera.position.x += ( mouseX - camera.position.x ) * 0.05;
				camera.position.y += ( - mouseY - camera.position.y ) * 0.05;
				camera.lookAt( scene.position );
				
				if ( mesh ) {
					mesh.rotation.x -= 0.01;
					mesh.rotation.y -= 0.01;
				};
	
				if ( mesh2 ) {
					mesh2.rotation.x += 0.01;
					mesh2.rotation.y += 0.01;
				};

				if ( mesh3 ) {
					mesh3.rotation.x += 0.01;
					mesh3.rotation.y += 0.01;
				};
				
				if ( mesh4 ) {
					mesh4.rotation.x -= 0.01;
					mesh4.rotation.y -= 0.01;
				};
				
				renderer.render( scene, camera );
			};
			
			init();
			animate();
			
		</script>

	</body>
</html>
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - level-of-details</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background:#000;
				padding:0;
				margin:0;
				overflow:hidden;
			}
			
		</style>
		
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-33109920-1', 'auto');
  ga('send', 'pageview');

</script>
	</head>

	<body>

		<script src="myscripts/threejs/three.js"></script>
		<script src="myscripts/threejs/Detector.js"></script>
		<script src="myscripts/threejs/FlyControls.js"></script>


		<script>
			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
			
			var container;
			//var stats;
			var camera, scene, renderer;
			var geometry, objects;
			var controls, clock = new THREE.Clock();

			
			
			function init() {
				container = document.createElement( 'div' );
				document.body.appendChild( container );
				
				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 15000 );
				camera.position.z = 1000;
				
				controls = new THREE.FlyControls( camera );
				controls.movementSpeed = 1000;
				controls.rollSpeed = Math.PI / 10;
				
				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0x000000, 1, 15000 );
				scene.autoUpdate = false;
				
				var light = new THREE.PointLight( 0xffffff,7 );
				light.position.set( 1, 0, 1 );
				scene.add( light );
				var light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 0, 0, 1 ).normalize();
				scene.add( light );
				
				var geometry = [
					[ new THREE.IcosahedronGeometry( 100, 4 ), 50 ],
					[ new THREE.IcosahedronGeometry( 100, 3 ), 300 ],
					[ new THREE.IcosahedronGeometry( 100, 2 ), 1000 ],
					[ new THREE.IcosahedronGeometry( 100, 1 ), 2000 ],
					[ new THREE.IcosahedronGeometry( 100, 0 ), 8000 ]
				];
				
				//var material = new THREE.MeshLambertMaterial( { color: 0xffffff, wireframe: true } );
				
				var map = new THREE.TextureLoader().load( 'images/matrixbackground.jpg' );
				map.wrapS = map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 16;
				var material = new THREE.MeshLambertMaterial( { map: map, side: THREE.DoubleSide } );
				
				var i, j, mesh, lod;
				for ( j = 0; j < 1000; j ++ ) {
					lod = new THREE.LOD();
					for ( i = 0; i < geometry.length; i ++ ) {
						mesh = new THREE.Mesh( geometry[ i ][ 0 ], material );
						mesh.scale.set( 1.5, 1.5, 1.5 );
						mesh.updateMatrix();
						mesh.matrixAutoUpdate = false;
						lod.addLevel( mesh, geometry[ i ][ 1 ] );
					}
					lod.position.x = 10000 * ( 0.5 - Math.random() );
					lod.position.y =  7500 * ( 0.5 - Math.random() );
					lod.position.z = 10000 * ( 0.5 - Math.random() );
					lod.updateMatrix();
					lod.matrixAutoUpdate = false;
					scene.add( lod );
				}
				
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.sortObjects = false;
				container.appendChild( renderer.domElement );
				//
				window.addEventListener( 'resize', onWindowResize, false );
			}
			
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			
			function render() {
				controls.update( clock.getDelta() );
				scene.updateMatrixWorld();
				scene.traverse( function ( object ) {
					if ( object instanceof THREE.LOD ) {
						object.update( camera );
					}
				} );
				renderer.render( scene, camera );
			}
			
			function animate() {
				requestAnimationFrame( animate );
				render();
			}			
						
			init();
			animate();
		
		</script>

	</body>
</html>
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometries with cute cat picture!</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background-color: #BCA9B6;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<script src="myscripts/threejs/three.js"></script>
		<script src="myscripts/threejs/Detector.js"></script>



		<script>
			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
			
			
			var container;
			//var stats;
			var camera, scene, renderer;

			
			function init() {
				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.y = 300;

				scene = new THREE.Scene();
				
				scene.fog = new THREE.Fog( 0xD6DDFC, 500, 1800 );

				var light, object;

				scene.add( new THREE.AmbientLight( 0xaaaaaa ) );

				light = new THREE.DirectionalLight( 0xcccccc );
				light.position.set( 1, 0, 0 );
				scene.add( light );

				var map = new THREE.TextureLoader().load( 'images/cutey.jpg' );
				map.wrapS = map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 16;
				var material = new THREE.MeshLambertMaterial( { map: map, side: THREE.DoubleSide } );


				object = new THREE.Mesh( new THREE.BoxGeometry( 300, 300, 300, 4, 4, 4 ), material );
				object.position.set( -200, 0, 0 );
				scene.add( object );

				
				object = new THREE.Mesh( new THREE.TorusKnotGeometry( 400, 100, 500, 120 ), material );
				object.position.set( 0, 0, -200 );
				scene.add( object );
	

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setClearColor( scene.fog.color );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );


				container.appendChild( renderer.domElement );
				//stats = new Stats();
				//container.appendChild( stats.dom );
				//

				window.addEventListener( 'resize', onWindowResize, false );
			}


			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			//


			function animate() {
				requestAnimationFrame( animate );
				render();
				//stats.update();
			}


			function render() {
				var timer = Date.now() * 0.0001;
				camera.position.x = Math.cos( timer ) * 800;
				camera.position.z = Math.sin( timer ) * 800;
				camera.lookAt( scene.position );
				for ( var i = 0, l = scene.children.length; i < l; i ++ ) {
					var object = scene.children[ i ];
					object.rotation.x = timer * 5;
					object.rotation.y = timer * 2.5;
				}
				renderer.render( scene, camera );
			}
			
			init();
			animate();
			
			
		</script>

	</body>
</html>